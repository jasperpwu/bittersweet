import { FC, useState, useEffect } from 'react';
import { View, Pressable, ScrollView, TextInput } from 'react-native';
import { Typography } from '../../ui/Typography';
import { useFocus } from '../../../store';
import { FocusGoal } from '../../../store/types';

interface FocusGoalFormProps {
  onSubmit: (goal: {
    name: string;
    targetMinutes: number;
    period: 'daily' | 'weekly' | 'yearly';
    tagIds: string[];
  }) => void;
  onCancel: () => void;
  editingGoal?: FocusGoal;
}

export const FocusGoalForm: FC<FocusGoalFormProps> = ({
  onSubmit,
  onCancel,
  editingGoal,
}) => {
  const [targetHours, setTargetHours] = useState(4);
  const [period, setPeriod] = useState<'daily' | 'weekly' | 'yearly'>('daily');
  const [selectedTagIds, setSelectedTagIds] = useState<string[]>([]);
  const [showAddTag, setShowAddTag] = useState(false);
  const [customGoalName, setCustomGoalName] = useState('');

  // Get tags from store
  const { tags } = useFocus();
  
  // Convert normalized tags to array
  const availableTags = tags.allIds.map(id => tags.byId[id]).filter(Boolean);

  // Populate form fields when editing
  useEffect(() => {
    if (editingGoal) {
      setTargetHours(Math.round(editingGoal.targetMinutes / 60));
      setPeriod(editingGoal.period);
      setSelectedTagIds(editingGoal.tagIds);
      
      // Set custom name if it's not the auto-generated pattern
      let autoGeneratedName;
      if (editingGoal.tagIds.length === 1) {
        const tag = tags.byId[editingGoal.tagIds[0]];
        const tagName = tag ? tag.name : 'Focus';
        autoGeneratedName = `${editingGoal.period.charAt(0).toUpperCase() + editingGoal.period.slice(1)} ${tagName} Goal`;
      } else {
        autoGeneratedName = `${editingGoal.period.charAt(0).toUpperCase() + editingGoal.period.slice(1)} Focus Goal`;
      }
      
      setCustomGoalName(editingGoal.name !== autoGeneratedName ? editingGoal.name : '');
    } else {
      // Reset to defaults when creating new goal
      setTargetHours(4);
      setPeriod('daily');
      setSelectedTagIds([]);
      setCustomGoalName('');
    }
    setShowAddTag(false);
  }, [editingGoal, tags.byId]);

  const handleSubmit = () => {
    const totalMinutes = targetHours * 60;
    
    // Generate goal name based on tag selection
    let goalName = customGoalName.trim();
    
    if (!goalName) {
      if (selectedTagIds.length === 1) {
        // Single tag: use "<period> <tag> Goal" format
        const tag = availableTags.find(t => t.id === selectedTagIds[0]);
        const tagName = tag ? tag.name : 'Focus';
        goalName = `${period.charAt(0).toUpperCase() + period.slice(1)} ${tagName} Goal`;
      } else {
        // Multiple tags or no tags: use generic format
        goalName = `${period.charAt(0).toUpperCase() + period.slice(1)} Focus Goal`;
      }
    }
    
    onSubmit({
      name: goalName,
      targetMinutes: totalMinutes,
      period,
      tagIds: selectedTagIds,
    });
  };

  const toggleTag = (tagId: string) => {
    setSelectedTagIds(prev => 
      prev.includes(tagId) 
        ? prev.filter(id => id !== tagId)
        : [...prev, tagId]
    );
  };

  const isValid = targetHours > 0 && selectedTagIds.length > 0;

  return (
    <ScrollView className="flex-1">
      <View className="space-y-4">
        {/* Time Period */}
        <View>
          <Typography variant="subtitle-16" color="white" className="mb-2">
            Time Period
          </Typography>
          <View className="flex-row space-x-2">
            {(['daily', 'weekly', 'yearly'] as const).map((p) => (
              <Pressable
                key={p}
                onPress={() => setPeriod(p)}
                className={`flex-1 p-3 rounded-xl ${
                  period === p ? 'bg-primary' : 'bg-dark-border'
                }`}
              >
                <Typography
                  variant="body-14"
                  className={`text-center ${
                    'text-white'
                  }`}
                >
                  {p.charAt(0).toUpperCase() + p.slice(1)}
                </Typography>
              </Pressable>
            ))}
          </View>
        </View>

        {/* Target Duration */}
        <View>
          <Typography variant="subtitle-16" color="white" className="mb-2">
            Target Duration (Hours)
          </Typography>
          <View className="flex-row items-center bg-dark-border rounded-xl p-3">
            <Pressable
              onPress={() => setTargetHours(Math.max(1, targetHours - 1))}
              className="w-8 h-8 rounded-full bg-primary items-center justify-center active:opacity-70 mr-3"
            >
              <Typography variant="body-14" color="white">−</Typography>
            </Pressable>
            <View className="flex-1 items-center">
              <Typography variant="headline-20" color="white">
                {targetHours} {targetHours === 1 ? 'hour' : 'hours'}
              </Typography>
            </View>
            <Pressable
              onPress={() => setTargetHours(Math.min(12, targetHours + 1))}
              className="w-8 h-8 rounded-full bg-primary items-center justify-center active:opacity-70 ml-3"
            >
              <Typography variant="body-14" color="white">+</Typography>
            </Pressable>
          </View>
        </View>

        {/* Tag Selection */}
        <View>
          <Typography variant="subtitle-16" color="white" className="mb-2">
            Tags *
          </Typography>
          <Typography variant="body-14" color="white" className="mb-3">
            Select at least one tag to track
          </Typography>
          <View className="flex-row flex-wrap">
            {selectedTagIds.map((tagId) => {
              const tag = availableTags.find(t => t.id === tagId);
              return tag ? (
                <Pressable
                  key={tag.id}
                  onPress={() => toggleTag(tag.id)}
                  className="flex-row items-center rounded-full px-3 py-2 mr-2 mb-2 bg-primary"
                >
                  <Typography variant="body-14" className="mr-1">
                    {tag.icon}
                  </Typography>
                  <Typography variant="body-14" className="text-white mr-1">
                    {tag.name}
                  </Typography>
                  <Typography variant="body-14" className="text-white">
                    ×
                  </Typography>
                </Pressable>
              ) : null;
            })}
            
            {/* Add Tag Button */}
            <Pressable
              onPress={() => setShowAddTag(!showAddTag)}
              className="flex-row items-center rounded-full px-3 py-2 mr-2 mb-2 bg-dark-border border-2 border-dashed border-gray-400"
            >
              <Typography variant="body-14" className="text-white mr-1">
                +
              </Typography>
              <Typography variant="body-14" className="text-white">
                Add Tag
              </Typography>
            </Pressable>
          </View>

          {/* Available Tags */}
          {showAddTag && (
            <View className="mt-3">
              <Typography variant="body-14" color="white" className="mb-2">
                Available Tags:
              </Typography>
              <View className="flex-row flex-wrap">
                {availableTags.filter(tag => !selectedTagIds.includes(tag.id)).map((tag) => (
                  <Pressable
                    key={tag.id}
                    onPress={() => {
                      toggleTag(tag.id);
                      setShowAddTag(false);
                    }}
                    className="flex-row items-center rounded-full px-3 py-2 mr-2 mb-2 bg-dark-border"
                  >
                    <Typography variant="body-14" className="mr-1">
                      {tag.icon}
                    </Typography>
                    <Typography variant="body-14" className="text-white">
                      {tag.name}
                    </Typography>
                  </Pressable>
                ))}
              </View>
            </View>
          )}
        </View>

        {/* Custom Goal Name - Show when multiple tags selected or when editing with custom name */}
        {(selectedTagIds.length > 1 || customGoalName) && (
          <View>
            <Typography variant="subtitle-16" color="white" className="mb-2">
              Goal Name (Optional)
            </Typography>
            <Typography variant="body-14" color="white" className="mb-3">
              Give your goal a custom name
            </Typography>
            <TextInput
              value={customGoalName}
              onChangeText={setCustomGoalName}
              placeholder={
                selectedTagIds.length === 1
                  ? (() => {
                      const tag = availableTags.find(t => t.id === selectedTagIds[0]);
                      const tagName = tag ? tag.name : 'Focus';
                      return `${period.charAt(0).toUpperCase() + period.slice(1)} ${tagName} Goal`;
                    })()
                  : `${period.charAt(0).toUpperCase() + period.slice(1)} Focus Goal`
              }
              placeholderTextColor="#6B7280"
              className="bg-dark-border rounded-xl p-3 text-white text-base"
              style={{ fontFamily: 'Poppins-Regular' }}
            />
          </View>
        )}

        {/* Action Buttons */}
        <View className="flex-row space-x-3 pt-4">
          <Pressable
            onPress={onCancel}
            className="flex-1 bg-dark-border rounded-xl p-3 active:opacity-70"
          >
            <Typography variant="body-14" color="white" className="text-center">
              Cancel
            </Typography>
          </Pressable>
          <Pressable
            onPress={handleSubmit}
            disabled={!isValid}
            className={`flex-1 rounded-xl p-3 active:opacity-70 ${
              isValid ? 'bg-primary' : 'bg-dark-border opacity-50'
            }`}
          >
            <Typography
              variant="body-14"
              color="white"
              className={`text-center text-white`}
            >
              {editingGoal ? 'Update Goal' : 'Create Goal'}
            </Typography>
          </Pressable>
        </View>
      </View>
    </ScrollView>
  );
};